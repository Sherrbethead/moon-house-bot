import logging
from datetime import date, datetime, timedelta
from distutils.util import strtobool

from aiogram import types, Bot, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.callback_data import CallbackData
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pony.orm import db_session, commit, desc, count, select, rollback

from aiogramcalendar import create_calendar, calendar_callback, process_calendar_selection
from config import settings
from moon_house_bot.database.models import Users, Parties, Notifications

bot = Bot(token=settings.token)
dp = Dispatcher(bot, storage=MemoryStorage())
scheduler = AsyncIOScheduler()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)


def chat_checker(login_required: bool = True):
    def decorator(func):
        @db_session
        async def wrapper(message):
            if message.chat.type == 'private' or message.chat.id == settings.target_chat_id:
                user = Users.select(lambda u: u.chat_id == message.from_user.id and u.deleted is None).first()
                if not login_required:
                    return await func(message, user)
                elif user and message.chat.type == 'private':
                    return await func(message)
        return wrapper
    return decorator


class PlanParty(StatesGroup):
    party_date = State()
    guests_amount = State()
    using_sofa = State()


class EditPartyDate(StatesGroup):
    edit_party_date = State()


class EditPartyGuestsAmount(StatesGroup):
    edit_party_guests_amount = State()


sofa_dict = {True: '–¥–∞', False: '–Ω–µ—Ç'}
new_user_data = CallbackData('new_user', 'accept', 'id')
party_manage_data = CallbackData('party_manage', 'id', 'using_sofa')
party_edit_data = CallbackData('party_edit', 'edit_type', 'id')
sofa_using_edit_data = CallbackData('sofa_using_edit', 'using', 'id')


@dp.message_handler(commands=['start', 'home'])
@chat_checker(login_required=False)
async def main_menu_handler(message: types.Message, user: Users):
    if message.chat.type == 'group':
        message_for_all_users = '–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã /home –∏–ª–∏ /start –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å–æ –º–Ω–æ–π, ' \
                                '—á—Ç–æ–±—ã –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–∞–∫–∏—Ö-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –∑–∞—Ö–ª–∞–º–ª—è—Ç—å —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. ' \
                                '–ê –≤—Å–µ –≤–∞–∂–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∑–¥–µ—Å—å –¥–ª—è –≤—Å–µ—Ö.'
        if not user:
            deleted_user = Users.select(lambda u: u.chat_id == message.from_user.id and u.deleted is not None).first()
            message_for_deleted = '—Å–Ω–æ–≤–∞ ' if deleted_user else ''
            if deleted_user:
                deleted_user.set(deleted=None)
                commit()
            else:
                Users(
                    chat_id=message.from_user.id,
                    firstname=message.from_user.first_name,
                    lastname=message.from_user.last_name,
                    nickname=message.from_user.username if message.from_user.username else None
                )
                commit()
            return await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! '
                                        f'–¢–µ–ø–µ—Ä—å —Ç—ã {message_for_deleted}—á–∞—Å—Ç—å –±—ã—Ç–æ–≤—É—Ö–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ —É–ª–∏—Ü–µ –†–∞–¥–∏–æ!\n'
                                        f'{message_for_all_users}')
        return await message.answer(message_for_all_users)
    if user:
        keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        all_buttons = ('–ü–æ—Å—É–¥–æ–º–æ–π–∫–∞ üç¥', '–í—ã–∫–∏–Ω—É—Ç—å –º—É—Å–æ—Ä üóë', '–¢—É—Å–æ–≤–∫–∏ üçª', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä')
        keyboard_markup.add(*all_buttons)
        return await message.reply('–ß—Ç–æ –¥–µ–ª–∞–µ–º?', reply_markup=keyboard_markup)

    keyboard_markup = types.InlineKeyboardMarkup()
    new_user_buttons = [
        types.InlineKeyboardButton('–ü—Ä–∏–Ω–∏–º–∞–µ–º ‚úÖ', callback_data=new_user_data.new(
            accept=True, id=message.from_user.id
        )),
        types.InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω—è–µ–º ‚ùå', callback_data=new_user_data.new(
            accept=False, id='-'
        )),
    ]
    keyboard_markup.add(*new_user_buttons)
    admins = Users.select(lambda u: u.is_admin is True and u.deleted is None)
    nickname = f'@{message.from_user.username.lower()} ' if message.from_user.username else ''
    for admin in admins:
        await bot.send_message(
            admin.chat_id,
            f'{message.from_user.full_name} {nickname}—Ö–æ—á–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è '
            f'–∫ –±—ã—Ç–æ–≤—É—Ö–µ –Ω–∞ –†–∞–¥–∏–æ. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?',
            reply_markup=keyboard_markup
        )


@dp.callback_query_handler(new_user_data.filter())
@db_session
async def resolve_new_user(call: types.CallbackQuery, callback_data: dict):
    accepted = strtobool(callback_data['accept'])
    message_words_list = call.message.text.split(maxsplit=3)

    message_addon = '' if accepted else '–Ω–µ '
    message_for_new_user = f'–¢—ã {message_addon}–ø—Ä–∏–Ω—è—Ç –≤ –±—ã—Ç–æ–≤—É—Ö—É –Ω–∞ –†–∞–¥–∏–æ'
    await bot.send_message(callback_data['id'], message_for_new_user)

    if accepted:
        deleted_user = Users.select(lambda u: u.chat_id == callback_data['id'] and u.deleted is not None).first()
        if deleted_user:
            deleted_user.set(deleted=None)
            commit()
        else:
            Users(
                chat_id=callback_data['id'],
                firstname=message_words_list[0],
                lastname=message_words_list[1],
                nickname=message_words_list[2].lstrip('@') if message_words_list[2].startswith('@') else None
            )
            commit()

        await call.message.answer(f'–¢—ã –ø—Ä–∏–Ω—è–ª {message_words_list[0]} {message_words_list[1]} –≤ –±—ã—Ç–æ–≤—É—Ö—É –Ω–∞ –†–∞–¥–∏–æ')
        return await call.message.delete_reply_markup()

    await call.message.answer(f'–¢—ã –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É {message_words_list[0]} {message_words_list[1]}')
    await call.message.delete_reply_markup()


async def check_user_honesty(message: types.Message, notification_type: str):
    today_trash_notifications = Notifications.select(
        lambda n: n.notification_type == notification_type and n.created.date() == date.today() and n.deleted is None
    ).count()
    if today_trash_notifications >= 3:
        notification_type_triple = {
            'trash': '–°–µ–≥–æ–¥–Ω—è –º—É—Å–æ—Ä —É–∂–µ —Ç—Ä–∏–∂–¥—ã –≤—ã–±—Ä–∞—Å—ã–≤–∞–ª–∏',
            'dishwasher_load': '–°–µ–≥–æ–¥–Ω—è –ø–æ—Å—É–¥–æ–º–æ–π–∫—É —É–∂–µ —Ç—Ä–∏–∂–¥—ã –∑–∞–≥—Ä—É–∂–∞–ª–∏',
            'dishwasher_unload': '–°–µ–≥–æ–¥–Ω—è –ø–æ—Å—É–¥–æ–º–æ–π–∫—É —É–∂–µ —Ç—Ä–∏–∂–¥—ã —Ä–∞–∑–≥—Ä—É–∂–∞–ª–∏'
        }
        dishonest_message = '–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –ø—Ä–æ—Å—Ç–æ –ø—ã—Ç–∞–µ—à—å—Å—è —Å–µ–±–µ –ø–æ–¥–Ω—è—Ç—å —Ä–µ–π—Ç–∏–Ω–≥'
        await message.answer(f'{notification_type_triple.get(notification_type)}. {dishonest_message}')
        return False
    return True


async def send_dishwasher_unload_notify():
    await bot.send_message(settings.target_chat_id, '–ü–æ—Å—É–¥–æ–º–æ–π–∫—É –º–æ–∂–Ω–æ —Ä–∞–∑–≥—Ä—É–∂–∞—Ç—å!')


@dp.message_handler(Text(equals='–ü–æ—Å—É–¥–æ–º–æ–π–∫–∞ üç¥'))
@chat_checker()
async def dishwasher_handler(message: types.Message):
    keyboard_markup = types.InlineKeyboardMarkup()
    dishwasher_buttons = [
        types.InlineKeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å ‚¨á', callback_data='dishwasher_load'),
        types.InlineKeyboardButton('–†–∞–∑–≥—Ä—É–∑–∏—Ç—å ‚¨Ü', callback_data='dishwasher_unload'),
    ]
    keyboard_markup.add(*dishwasher_buttons)
    await message.answer('–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ—Å—É–¥–æ–º–æ–π–∫–æ–π?', reply_markup=keyboard_markup)


@dp.callback_query_handler(Text(startswith='dishwasher'))
@db_session
async def dishwasher_callback(call: types.CallbackQuery):
    honesty = await check_user_honesty(call.message, call.data)

    if honesty:
        action_prefixes = {
            True: '—Ä–∞–∑',
            False: '–∑–∞'
        }
        unload = call.data.endswith('unload')
        dishwasher_last_notification = Notifications.select(
            lambda n: n.notification_type in ('dishwasher_load', 'dishwasher_unload') and n.deleted is None
        ).order_by(desc(Notifications.created)).first()
        if (not dishwasher_last_notification and unload) or \
                (dishwasher_last_notification and dishwasher_last_notification.notification_type == call.data):
            last_time_loaded = f'\n–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ {action_prefixes.get(unload)}–≥—Ä—É–∂–∞–ª–∞—Å—å: ' \
                               f'{dishwasher_last_notification.created.strftime("%d.%m.%y –≤ %H:%M")}' \
                if dishwasher_last_notification else ''
            return await call.message.answer(
                f'–ü—Ä–µ–∂–¥–µ —á–µ–º {action_prefixes.get(unload)}–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—É–¥–æ–º–æ–π–∫—É, '
                f'–µ–µ –Ω–∞–¥–æ {action_prefixes.get(not unload)}–≥—Ä—É–∑–∏—Ç—å{last_time_loaded}'
            )
        now = datetime.now()
        dishwasher_working_minutes = timedelta(minutes=2)
        if unload:
            if dishwasher_last_notification.created + dishwasher_working_minutes > now:
                return await call.message.answer('–ü–æ—Å—É–¥–æ–º–æ–π–∫–∞ –µ—â–µ –º–æ–µ—Ç, –Ω–µ–ª—å–∑—è —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å')

        else:
            datetime_unload = now + dishwasher_working_minutes
            scheduler.add_job(send_dishwasher_unload_notify, 'date', run_date=datetime_unload)
        Notifications(
            user=call.from_user.id,
            notification_type=call.data
        )
        commit()

        await bot.send_message(
            settings.target_chat_id,
            f'{call.from_user.full_name} {action_prefixes.get(unload)}–≥—Ä—É–∑–∏–ª(–∞) –ø–æ—Å—É–¥–æ–º–æ–π–∫—É'
        )
        await call.message.delete_reply_markup()


@dp.message_handler(Text(equals='–í—ã–∫–∏–Ω—É—Ç—å –º—É—Å–æ—Ä üóë'))
@chat_checker()
async def trash_handler(message: types.Message):
    honesty = await check_user_honesty(message, 'trash')
    if honesty:
        Notifications(
            user=message.from_user.id,
            notification_type='trash'
        )
        commit()

        trash_message = '–≤—ã–∫–∏–Ω—É–ª(–∞) –º—É—Å–æ—Ä'
        await bot.send_message(settings.target_chat_id, f'{message.from_user.full_name} {trash_message}')


@dp.message_handler(Text(equals='–¢—É—Å–æ–≤–∫–∏ üçª'))
@chat_checker()
async def parties_handler(message: types.Message):
    keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
    parties_buttons = [
        types.InlineKeyboardButton('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é üéâ', callback_data='party_new'),
        types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ üìÜ', callback_data='party_closest'),
        types.InlineKeyboardButton('–£–ø—Ä–∞–≤–ª—è—Ç—å üèÑ‚Äç', callback_data='party_manage'),
    ]
    keyboard_markup.add(*parties_buttons)
    await message.answer('–ß—Ç–æ –ø–æ —Ç—É—Å–æ–≤–∫–∞–º?', reply_markup=keyboard_markup)


@dp.callback_query_handler(Text(equals='party_new'), state='*')
async def plan_party_date(call: types.CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É', reply_markup=create_calendar())
    await call.message.delete_reply_markup()
    await PlanParty.party_date.set()


@dp.callback_query_handler(calendar_callback.filter(), state=PlanParty.party_date)
@db_session
async def choose_party_date(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    selected_date = await process_calendar_selection(call, callback_data)
    if selected_date:
        party = Parties.select(lambda p: p.party_date == selected_date and p.deleted is None).first()
        if party:
            return await call.message.reply(
                f'–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –¥–∞—Ç—É. –ù–∞ {selected_date.strftime("%d.%m.%y")} —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ç—É—Å–æ–≤–∫–∞',
                reply_markup=create_calendar()
            )
        await state.update_data(party_date=selected_date)
        await call.message.answer(f'–í—ã–±—Ä–∞–Ω–æ {selected_date.strftime("%d.%m.%y")}')
        await call.message.reply('–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π')
        await PlanParty.guests_amount.set()


async def validate_guests_amount(message: types.Message, amount_data: str):
    try:
        guests_amount = int(amount_data)
    except ValueError:
        return False, await message.reply('–ê–≥–∞, —à—É—Ç–∫–∞ –∫–ª–∞—Å—Å–Ω–∞—è, –∞ —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞')
    if guests_amount < 1:
        return False, await message.reply(
            '–û–≥–æ, —Ç—É—Å–æ–≤–∫–∞ –æ–±–µ—â–∞–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –≤–µ—Å–µ–ª–æ–π. '
            '–ù–æ –ª—É—á—à–µ –≤—Å–µ –∂–µ –≤–≤–µ—Å—Ç–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –≥–æ—Å—Ç—è'
        )
    elif guests_amount > 50:
        return False, await message.reply('–ö–∞–∂–µ—Ç—Å—è, —Å—Ç–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –†–∞–¥–∏–æ –Ω–µ –ø–æ—Ç—è–Ω–µ—Ç')
    return True, guests_amount


@dp.message_handler(state=PlanParty.guests_amount)
async def plan_party_using_sofa(message: types.Message, state: FSMContext):
    validated, guests_amount = await validate_guests_amount(message, message.text)

    if validated:
        await state.update_data(guests_amount=guests_amount)
        keyboard_markup = types.InlineKeyboardMarkup()
        sofa_using_buttons = [
            types.InlineKeyboardButton('–î–∞', callback_data='sofa_using_yes'),
            types.InlineKeyboardButton('–ù–µ—Ç', callback_data='sofa_using_no'),
        ]
        keyboard_markup.add(*sofa_using_buttons)
        await message.reply('–ë—É–¥–µ—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∏–≤–∞–Ω?', reply_markup=keyboard_markup)
        await PlanParty.using_sofa.set()


@dp.callback_query_handler(Text(startswith='sofa_using'), state=PlanParty.using_sofa)
@db_session
async def plan_party_save(call: types.CallbackQuery, state: FSMContext):
    using_sofa = call.data.endswith('yes')
    await state.update_data(using_sofa=using_sofa)
    user_data = await state.get_data()
    Parties(user=call.from_user.id, **user_data)
    commit()
    await state.finish()
    await bot.send_message(
        settings.target_chat_id,
        f"{call.from_user.full_name} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª(–∞) —Ç—É—Å–æ–≤–∫—É {user_data.get('party_date').strftime('%d.%m.%y')}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {user_data.get('guests_amount')}\n"
        f"–î–∏–≤–∞–Ω –±—É–¥–µ—Ç –∑–∞–Ω—è—Ç: {sofa_dict.get(user_data.get('using_sofa'))}"
    )
    await call.message.delete_reply_markup()


@dp.callback_query_handler(Text(startswith='party_closest'))
@db_session
async def show_closest_parties(call: types.CallbackQuery):
    parties = Parties.select(
        lambda p: p.party_date >= date.today() and p.deleted is None
    ).order_by(lambda p: p.party_date)[:3]
    if parties:
        parties_list = [
            f'{p.party_date}, –ª—é–¥–µ–π: {p.guests_amount}, –¥–∏–≤–∞–Ω –±—É–¥–µ—Ç –∑–∞–Ω—è—Ç: {sofa_dict.get(p.using_sofa)}'
            for p in parties
        ]
        parties_answer = '\n'.join(parties_list)
    else:
        parties_answer = '–ù–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∏–∫–∞–∫–∏—Ö —Ç—É—Å–æ–≤–æ–∫ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'
    await call.message.answer(parties_answer)
    await call.message.delete_reply_markup()


@dp.callback_query_handler(Text(equals='party_manage'))
@db_session
async def show_user_parties(call: types.CallbackQuery):
    user_parties = Parties.select(
        lambda p: p.user.chat_id == call.from_user.id and p.party_date >= date.today() and p.deleted is None
    ).order_by(lambda p: p.party_date)
    if user_parties:
        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        your_parties_buttons = [
            types.InlineKeyboardButton(
                f'{p.party_date.strftime("%d.%m.%y")}, '
                f'–≥–æ—Å—Ç–µ–π: {p.guests_amount}, '
                f'–∑–∞–Ω—è—Ç–æ—Å—Ç—å –¥–∏–≤–∞–Ω–∞: {sofa_dict.get(p.using_sofa)}',
                callback_data=party_manage_data.new(id=p.id, using_sofa=p.using_sofa)
            ) for p in user_parties
        ]
        keyboard_markup.add(*your_parties_buttons)
        await call.message.answer('–í—ã–±–µ—Ä–∏ —Ç—É—Å–æ–≤–∫—É', reply_markup=keyboard_markup)
    else:
        await call.message.answer('–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—É—Å–æ–≤–∫–∏')
    await call.message.delete_reply_markup()


@dp.callback_query_handler(party_manage_data.filter())
@db_session
async def user_party_manage(call: types.CallbackQuery, callback_data: dict):
    change_using_sofa = not strtobool(callback_data["using_sofa"])
    keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
    your_parties_buttons = [
        types.InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É —Ç—É—Å–æ–≤–∫–∏',
                                   callback_data=party_edit_data.new(
                                       edit_type='party_date', id=callback_data['id'])
                                   ),
        types.InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π',
                                   callback_data=party_edit_data.new(
                                       edit_type='guests_amount', id=callback_data['id'])
                                   ),
        types.InlineKeyboardButton(f'–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç—å –¥–∏–≤–∞–Ω–∞ –Ω–∞ ¬´{sofa_dict.get(change_using_sofa)}¬ª',
                                   callback_data=party_edit_data.new(
                                       edit_type='sofa_using', id=callback_data['id'])
                                   ),
        types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ç—É—Å–æ–≤–∫—É',
                                   callback_data=party_edit_data.new(
                                       edit_type='delete_party', id=callback_data['id'])
                                   ),
    ]
    keyboard_markup.add(*your_parties_buttons)
    await call.message.answer('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboard_markup)
    await call.message.delete_reply_markup()


@dp.callback_query_handler(party_edit_data.filter(edit_type='party_date'), state='*')
async def edit_party_date(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await state.update_data(party_id=callback_data['id'])
    await call.message.answer('–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É', reply_markup=create_calendar())
    await call.message.delete_reply_markup()
    await EditPartyDate.edit_party_date.set()


@dp.callback_query_handler(calendar_callback.filter(), state=EditPartyDate.edit_party_date)
@db_session
async def choose_new_party_date(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    selected_date = await process_calendar_selection(call, callback_data)
    if selected_date:
        user_data = await state.get_data()
        party_with_the_same_date = Parties.select(
            lambda p: p.id != user_data.get('party_id') and p.party_date == selected_date and p.deleted is None
        ).first()
        if party_with_the_same_date:
            return await call.message.reply(
                f'–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –¥–∞—Ç—É. –ù–∞ {selected_date.strftime("%d.%m.%y")} —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ç—É—Å–æ–≤–∫–∞',
                reply_markup=create_calendar()
            )
        party = Parties.select(lambda p: p.id == user_data.get('party_id')).first()
        await state.finish()
        old_date = party.party_date
        if selected_date == old_date:
            await call.message.answer('–î–∞—Ç–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å')
        else:
            party.set(party_date=selected_date)
            commit()
            await bot.send_message(
                settings.target_chat_id,
                f'{call.from_user.full_name} –∏–∑–º–µ–Ω–∏–ª –¥–∞—Ç—É —Ç—É—Å–æ–≤–∫–∏ '
                f'—Å {old_date.strftime("%d.%m.%y")} –Ω–∞ {party.party_date.strftime("%d.%m.%y")}'
            )


@dp.callback_query_handler(party_edit_data.filter(edit_type='guests_amount'), state='*')
async def edit_party_guests_amount(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await state.update_data(party_id=callback_data['id'])
    await call.message.reply('–°–∫–æ–ª—å–∫–æ –≤—Å–µ-—Ç–∞–∫–∏ –±—É–¥–µ—Ç –≥–æ—Å—Ç–µ–π?')
    await EditPartyGuestsAmount.edit_party_guests_amount.set()


@dp.message_handler(state=EditPartyGuestsAmount.edit_party_guests_amount)
@db_session
async def choose_party_guests_amount(message: types.Message, state: FSMContext):
    validated, guests_amount = await validate_guests_amount(message, message.text)

    if validated:
        user_data = await state.get_data()
        party = Parties.select(lambda p: p.id == user_data.get('party_id')).first()
        await state.finish()
        old_guests_amount = party.guests_amount
        if guests_amount == old_guests_amount:
            await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å')
        else:
            party.set(guests_amount=guests_amount)
            commit()
            await bot.send_message(
                settings.target_chat_id,
                f'{message.from_user.full_name} –∏–∑–º–µ–Ω–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π —Ç—É—Å–æ–≤–∫–∏ '
                f'{party.party_date.strftime("%d.%m.%y")} —Å {old_guests_amount} –Ω–∞ {guests_amount}'
            )


@dp.callback_query_handler(party_edit_data.filter(edit_type='sofa_using'))
@db_session
async def reverse_party_sofa_using(call: types.CallbackQuery, callback_data: dict):
    party = Parties.select(lambda p: p.id == callback_data['id']).first()
    old_using_sofa = party.using_sofa
    party.set(using_sofa=not old_using_sofa)
    commit()

    await bot.send_message(
        settings.target_chat_id,
        f'{call.from_user.full_name} –∏–∑–º–µ–Ω–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏–≤–∞–Ω–∞ —Ç—É—Å–æ–≤–∫–∏ {party.party_date.strftime("%d.%m.%y")} '
        f'—Å ¬´{sofa_dict.get(old_using_sofa)}¬ª –Ω–∞ ¬´{sofa_dict.get(party.using_sofa)}¬ª'
    )


@dp.callback_query_handler(party_edit_data.filter(edit_type='delete_party'))
@db_session
async def delete_party(call: types.CallbackQuery, callback_data: dict):
    party = Parties.select(lambda p: p.id == callback_data['id'] and p.deleted is None).first()
    party.set(deleted=datetime.now())
    commit()
    await bot.send_message(
        settings.target_chat_id,
        f'{call.from_user.full_name} –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç—É—Å–æ–≤–∫—É {party.party_date.strftime("%d.%m.%y")}'
    )


def prepare_statistics():
    users_with_notifications = select(
        (u.firstname, u.lastname, count(n)) for u in Users for n in u.notifications if u.deleted is None
    ).order_by(-3)
    users_without_notifications = select(
        (u.firstname, u.lastname, 0) for u in Users if not u.notifications and u.deleted is None
    )
    rollback()
    users = list(users_with_notifications) + list(users_without_notifications)
    users_list = [f'{i}. {u[0]} {u[1]} - {u[2]}' for i, u in enumerate(users, 1)]
    return '\n'.join(users_list)


@dp.message_handler(Text(equals='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä'))
@chat_checker()
async def show_statistics(message: types.Message):
    statistics = prepare_statistics()
    await message.answer(statistics)


@db_session
async def show_cron_statistics():
    statistics = prepare_statistics()
    await bot.send_message(settings.target_chat_id, statistics)


def schedule_daily_notifications():
    scheduler.add_job(show_cron_statistics, 'cron', hour=4, minute=6)
